#include "fw.h"


int create_rule_from_packet(struct sk_buff *skb, rule_t *new_rule) {

  struct iphdr *iph;
  struct udphdr *udph;
  struct tcphdr *tcph;
  iph = ip_hdr(skb);
  new_rule->src_ip = iph->saddr;
  new_rule->dst_ip = iph->daddr;
  new_rule->protocol = iph->protocol;
  // TODO(amirt): validate that this is what expected.
  new_rule->ack = ACK_ANY; // This is overridden in case it is a TCP protocol.

  switch (new_rule->protocol) {
  case PROT_TCP:
    tcph = tcp_hdr(skb);
    new_rule->src_port = tcph->source;
    new_rule->dst_port = tcph->dest;
    new_rule->ack = tcph->ack ? ACK_YES : ACK_NO;
    // Check X_MAS_PACKET
    if (tcph->fin && tcph->urg && tcph->psh) {
      //log_entry(&input, NULL, REASON_XMAS_PACKET, hooknum, 0);
      return -1;
    }
    break;
  case PROT_UDP:
    udph = udp_hdr(skb);
    new_rule->src_port = udph->source;
    new_rule->dst_port = udph->dest;
    break;
  case PROT_ICMP: // ICMP doesn't uses port. TODO(amirt): validate that this is what expected.
  case PROT_OTHER:
  case PROT_ANY:
    new_rule->src_port = PORT_ANY;
    new_rule->dst_port = PORT_ANY;
  }
  return 0;
}

int ports_match(int rule_port, int table_rule_port) {
  return (table_rule_port == PORT_ANY_NUMBER)
      || ((table_rule_port > PORT_1023) && (rule_port > PORT_1023))
      || (table_rule_port == rule_port);
}

int ips_match(int rule_ip, int table_rule_ip) {
  return (table_rule_ip == IP_ANY) || (table_rule_ip == rule_ip);
}

/*
 * Check if a given rule matches a given table rule.
 */
int match_rule_aginst_table_rule(rule_t rule, rule_t table_rule) {
  return
      ports_match(rule.src_port, table_rule.src_port)
      && ports_match(rule.dst_port, table_rule.dst_port)
      && ips_match(rule.src_ip, table_rule.src_ip)
      && ips_match(rule.dst_ip, table_rule.dst_ip)
}

int verify_packet(struct sk_buff *skb, const struct net_device *in, int hooknum) {
  int i;
  rule_t rule;
  // DROP packet even before the comapration to the rules table.
  if (create_rule_from_packet(skb, &rule) < 0) {
    return NF_DROP;
  }

  for (i = 0; i < number_of_rules; i++) {
    match_rule_aginst_table_rule(rule, rules_table[i]);
  }

  return NF_ACCEPT;
}









//int get_packet(struct sk_buff *skb, const struct net_device *in, int hooknum) {
//
//  int dynamic_action;
//  rule_t input;
//  struct iphdr * iph;
//  struct tcphdr * tcph;
//  struct udphdr * udph;
//
//  input.src_ip = *((unsigned int *) (skb->data + 12));
//  input.dst_ip = *((unsigned int *) (skb->data + 16));
//  input.protocol = *((__u8 *) (skb->data + 9));
//
//  input.src_port = 0;
//  input.dst_port = 0;
//  input.ack = ACK_ANY;
//
//  // Check that the packet came from the right network device
//  if (in->name != NULL) {
//    if (strcmp(in->name, IN_NET_DEVICE_NAME) == 0) {
//      input.direction = DIRECTION_IN;
//    } else if (strcmp(in->name, OUT_NET_DEVICE_NAME) == 0) {
//      input.direction = DIRECTION_OUT;
//    }
//  } else {
//    // Allow other traffic
//    return 1;
//  }
//
//  iph = ip_hdr(skb);
//  tcph = (struct tcphdr *) ((__u32 *) iph + iph->ihl);
//  udph = (struct udphdr *) ((__u32 *) iph + iph->ihl);
//
//  // If the firewall is inactive, let all packets pass
//  if (firewall_active == 0) {
//    log_entry(&input, NULL, REASON_FW_INACTIVE, hooknum, 1);
//    return 1;
//  }
//
//  if (input.protocol == PROT_ICMP) {
//    input.src_port = PORT_ANY;
//    input.dst_port = PORT_ANY;
//  } else if (input.protocol == PROT_UDP) {
//    input.src_port = udph->source;
//    input.dst_port = udph->dest;
//  } else if (input.protocol == PROT_TCP) {
//    input.src_port = tcph->source;
//    input.dst_port = tcph->dest;
//    input.ack = tcph->ack ? ACK_YES : ACK_NO;
//
//    // Handle X_MAS
//    if (tcph->fin && tcph->urg && tcph->psh) {
//      log_entry(&input, NULL, REASON_XMAS_PACKET, hooknum, 0);
//      return 0;
//    }
//  }
//
//  if (input.protocol == PROT_TCP) {
//    dynamic_action = check_dynamic_action(input, tcph);
//
//    if (dynamic_action == -1) {
//      return 0;
//    } else if (dynamic_action) {
//      return 1;
//    } else if (check_static_action(input, hooknum) && input.ack == ACK_NO) {
//      create_dynamic_rule(input);
//      return 1;
//    } else {
//      return 0;
//    }
//  }
//
//  return check_static_action(input, hooknum);
//}
