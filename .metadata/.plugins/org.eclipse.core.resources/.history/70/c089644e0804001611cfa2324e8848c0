
#include "fw.h"

/**
 * The basic device that we wrote on EX2.
 * Might remove this later on.
 */

int rules_device_major_number;
struct device* info_device_sysfs_device = NULL;
struct file_operations info_device_fops = {
  .owner = THIS_MODULE
};


static struct file_operations fops = {
  .owner = THIS_MODULE
};

/* packet counters. TODO: create locks */
static int number_of_passed_packets = 0;
static int number_of_blocked_packets = 0;

static char output_template[] =
    "Firewall Packets Summary:\n"
    "Number of accepted packets: %d\n"
    "Number of dropped packets: %d\n"
    "Total number of packets: %d\n";

/***************************************************************************************************
 * Driver sysfs ops.
 **************************************************************************************************/

/*
 * Sysfs show implementation.
 * Returns a message that specifies the number of passed/blocked packets.
 */
ssize_t show(struct device *dev,struct device_attribute *attr, char *buf) {
  return scnprintf(buf, PAGE_SIZE, output_template,
      number_of_passed_packets, number_of_blocked_packets,
      number_of_passed_packets + number_of_blocked_packets);
}

/*
 * Sysfs store implementation.
 * For now this implementation just resets the counters.
 */
ssize_t store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count) {
  char c;
  int returnValue;
  if((returnValue = sscanf(buf, "%c", &c)) == 1) {
    number_of_passed_packets = 0;
    number_of_blocked_packets = 0;
  }
  return returnValue;
}

/*
 * Register ops.
 */
static DEVICE_ATTR(sysfs_att, S_IRWXO , show, store);


/***************************************************************************************************
 * Registration methods
 **************************************************************************************************/


int register_info_driver(struct class* fw_sysfs_class) {
  // Create char device. fops is empty because we are using sysfs.
  rules_device_major_number = register_chrdev(0, RULES_DEVICE_NAME, &rules_device_fops);
  if(rules_device_major_number < 0) {
    return -1;
  }

  // Create sysfs device.
  rules_device_sysfs_device = device_create(
      fw_sysfs_class, NULL, MKDEV(rules_device_major_number, 0), NULL, RULES_DEVICE_NAME);
  if(IS_ERR(rules_device_sysfs_device)) {
    unregister_chrdev(rules_device_major_number, RULES_DEVICE_NAME);
    return -1;
  }

  // Create sysfs file attributes .
  if(device_create_file(rules_device_sysfs_device,
      (const struct device_attribute*) &dev_attr_rules_load_store.attr)) {
    device_destroy(fw_sysfs_class, MKDEV(rules_device_major_number, 0));
    unregister_chrdev(rules_device_major_number, RULES_DEVICE_NAME);
    return -1;
  }
  return 0;
}

