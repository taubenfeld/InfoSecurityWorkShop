#include "fw_module.h"

// Netfilter stuff.
static struct nf_hook_ops pre_hook_struct;
static struct nf_hook_ops post_routing_hook_struct;
static struct class* sysfs_class = NULL;

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Amir Taubenfeld");

/***************************************************************************************************
 * Netfilter hooks.
 **************************************************************************************************/

/**
 * Function that will be hooked.
 * This function will be called by netfilter for ingoing packets.
 */
unsigned int in_routing_hook(unsigned int hooknum, struct sk_buff *skb,
    const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *)) {
  if (verify_packet(skb, hooknum) == NF_ACCEPT) {
    number_of_passed_packets++;
    return NF_ACCEPT;
  } else {
    number_of_blocked_packets++;
    return NF_DROP;
  }
}

/**
 * Function that will be hooked.
 * This function will be called by netfilter for packets that passed.
 */
unsigned int post_routing_hook(unsigned int hooknum, struct sk_buff *skb,
    const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *)) {
  if (verify_packet(skb, hooknum) == NF_ACCEPT) {
    number_of_passed_packets++;
    return NF_ACCEPT;
  } else {
    number_of_blocked_packets++;
    return NF_DROP;
  }
}


/***************************************************************************************************
 * Module's registeration and unregisteration methods.
 **************************************************************************************************/


static int register_drivers(void) {
  sysfs_class = class_create(THIS_MODULE, CLASS_NAME);
  if(IS_ERR(sysfs_class)) {
    return -1;
  }
  if (register_info_driver(sysfs_class) == -1) {
    class_destroy(sysfs_class);
    return -1;
  }
  if (register_rules_driver(sysfs_class) == -1) {
    remove_info_device(sysfs_class);
    class_destroy(sysfs_class);
    return -1;
  }
  if (register_logs_driver(sysfs_class) == -1) {
    remove_info_device(sysfs_class);
    remove_rules_device(sysfs_class);
    class_destroy(sysfs_class);
    return -1;
  }
  if (register_connections_driver(sysfs_class) == -1) {
    remove_info_device(sysfs_class);
    remove_rules_device(sysfs_class);
    remove_logs_device(sysfs_class);
    class_destroy(sysfs_class);
    return -1;
  }

  return 1;
}

static int register_hooks(void) {
  pre_hook_struct.hook = in_routing_hook;  // Hook our function.
  pre_hook_struct.hooknum = NF_INET_LOCAL_IN;
  pre_hook_struct.priority = NF_IP_PRI_FIRST;
  pre_hook_struct.pf = PF_INET;
  if (nf_register_hook(&pre_hook_struct) < 0) {
    return -1;
  }

  post_routing_hook_struct.hook = post_routing_hook;  // Hook our function.
  post_routing_hook_struct.hooknum = NF_INET_POST_ROUTING;  // Hook to on post routing.
  post_routing_hook_struct.priority = NF_IP_PRI_LAST;
  post_routing_hook_struct.pf = PF_INET;
  if (nf_register_hook(&post_routing_hook_struct) < 0) {
    nf_unregister_hook(&pre_hook_struct);
    return -1;
  }
  return 1;
}


static void dismiss_hooks(void) {
  nf_unregister_hook(&pre_hook_struct);
  nf_unregister_hook(&post_routing_hook_struct);
}

/**
 * The function that initialize the module.
 */
static int __init start_module(void) {
  printk(KERN_INFO "Amir's firewall is being loaded!\n");
  if (register_hooks() < 0) {
    printk(KERN_INFO "ERROR: Failed to register hooks\n");
    return -1;
  }
  if (register_drivers() < 0) {
    dismiss_hooks();
    printk(KERN_INFO "ERROR: Failed to register drivers\n");
    return -1;
  }
  init_connections_list(); // TODO: Wrap this in a more appropriate manner.
  return 0;  // if non-0 return, then init_module have failed.
}

/**
 * The function that dismiss the module.
 */
static void __exit dismiss_module(void) {
  printk(KERN_INFO "Amir's firewall is been dismissed!\n");
  dismiss_hooks();
  remove_info_device(sysfs_class);
  remove_rules_device(sysfs_class);
  remove_logs_device(sysfs_class);
  class_destroy(sysfs_class);
}

module_init(start_module);
module_exit(dismiss_module);
