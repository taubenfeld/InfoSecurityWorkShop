#include "stateful.h"

int connections_device_major_number;
struct device* host_sysfs_device = NULL;

connections_list_entry connections_list;
int list_size = 0;

/*
 * Variables that uses for the read operation.
 */
char *connections_read_buffer;
int remaining_num_of_bytes_to_read;
char *pointer_to_current_location_in_connections_read_buffer;

/*
 * Variables for the hosts data.
 */
char hosts_string[PAGE_SIZE];

/***************************************************************************************************
 * Private methods.
 **************************************************************************************************/


/**
 * Adding a new connection with the given arguments. It is assumed that the caller already checked
 * that this is a valid connection.
 */
void add_connection(
    __be32 src_ip, __be16 src_port, __be32 dst_ip, __be16 dst_port, __u16 fragment, __u8 protocol) {
  connections_list_entry *new;
  struct timeval time;
  do_gettimeofday(&time);

  // Note that it is important to use GFP_ATOMIC due to concurrency considerations.
  new = kmalloc(sizeof(connections_list_entry), GFP_ATOMIC);
  if (new == NULL) {
    printk(KERN_INFO "ERROR: Failed to allocate space for new connection."
        " Not adding the current connection.\n");
    return;
  }
  printk(KERN_INFO "protocol %u.", protocol);
  INIT_LIST_HEAD(&(new->list));
  new->timestamp = time.tv_sec;
  new->src_ip = src_ip;
  new->dst_ip = dst_ip;
  new->src_port = src_port;
  new->dst_port = dst_port;
  new->fragment = fragment;
  new->protocol = protocol;
  new->tcp_state = SENT_SYN_WAIT_SYNACK;

  // TODO: Specify protocol.
  list_add_tail(&(new->list), &connections_list.list);
  list_size++;
}

void remove_connection(connections_list_entry *entry) {
  if (list_empty(&(connections_list.list))) { // List is empty nothing to do.
    return;
  }
  list_del(&(entry->list));
  kfree(entry);
  list_size--;
}
connections_list_entry *find_connection(
    __be32 src_ip, __be16 src_port, __be32 dst_ip, __be16 dst_port) {
  connections_list_entry *cur_entry;
  list_for_each_entry(cur_entry, &(connections_list.list), list) {
//    printk(KERN_INFO "cur_entry->src_ip = [%u], cur_entry->src_port = [%u], cur_entry->dst_ip = [%u], cur_entry->dst_port = [%u].",
//        cur_entry->src_ip, cur_entry->src_port, cur_entry->dst_ip, cur_entry->dst_port);
//    printk(KERN_INFO "src_ip = [%u], src_port = [%u], dst_ip = [%u], dst_port = [%u].",
//        src_ip, src_port, dst_ip, dst_port);
    if ((cur_entry->src_ip == src_ip && cur_entry->src_port == src_port
        && cur_entry->dst_ip == dst_ip && cur_entry->dst_port == dst_port) ||
        (cur_entry->src_ip == dst_ip && cur_entry->src_port == dst_port
        && cur_entry->dst_ip == src_ip && cur_entry->dst_port == src_port)) {
      return cur_entry;
    }
  }
  printk(KERN_INFO "Didn't find anything.");
  return NULL;
}

void get_connections_as_string(char *buff, int size) {
  connections_list_entry *cur_entry;
  char temp_str_connection[ROW_SIZE_AS_STRING + 1] = {0};
  int cursize = 0;

  list_for_each_entry(cur_entry, &(connections_list.list), list) {
    cursize += scnprintf(temp_str_connection, ROW_SIZE_AS_STRING + 1,
        "%u %u %u %u %u %u %u %lu\n",
        cur_entry->src_ip,
        cur_entry->src_port,
        cur_entry->dst_ip,
        cur_entry->dst_port,
        cur_entry->protocol,
        cur_entry->tcp_state,
        cur_entry->protocol_state,
        cur_entry->timestamp);

    if (cursize >= size) {
      return; // Can reach here only because of multi threading issues.
    }
    strcat(buff, temp_str_connection);
  }
}

void clear_connections_list(void) {
  connections_list_entry *cur_entry, *temp;
  if (list_empty(&(connections_list.list))) { // List is empty nothing to do.
    return;
  }
  list_for_each_entry_safe(cur_entry, temp, &(connections_list.list), list) {
    list_del(&(cur_entry->list));
    kfree(cur_entry);
  }
  list_size = 0;
}

int get_list_size(void) {
  return list_size;
}

void init_connections_list(void) {
  INIT_LIST_HEAD(&connections_list.list);
  list_size = 0;
}


/***************************************************************************************************
 * Public methods.
 **************************************************************************************************/


int validate_and_update_connection(__be32 src_ip, __be16 src_port, __be32 dst_ip, __be16 dst_port,
    __u16 fragment, int syn, int ack, int fin, __u8 protocol, reason_t *reason) {
  connections_list_entry *connection = find_connection(src_ip, src_port, dst_ip, dst_port);
  // Convert syn and ack to a more comfortable form.
  syn = syn == ACK_YES ? 1 : 0;
  ack = ack == ACK_YES ? 1 : 0;
  fin = fin == ACK_YES ? 1 : 0;
  if (connection == NULL) {
    if (syn && !ack) {
      printk(KERN_INFO "Creating connection.");
      printk(KERN_INFO "protocol %u.", protocol);
      add_connection(src_ip, src_port, dst_ip , dst_port, fragment, protocol);
      *reason = VALID_TCP_CONNECTION;
      return NF_ACCEPT;
    } else {
      printk(KERN_INFO "Connection not exists.");
      *reason = CONN_NOT_EXIST;
      return NF_DROP;
    }
  }
  switch (connection->tcp_state) {
    case SENT_SYN_WAIT_SYNACK:
      printk(KERN_INFO "in SENT_SYN_WAIT_SYNACK.");
      if (ack && syn) {
        printk(KERN_INFO "Received syn ack.");
        connection->tcp_state = SENT_SYNACK_WAIT_ACK;
        *reason = VALID_TCP_CONNECTION;
        return NF_ACCEPT;
      }
      break;
    case SENT_SYNACK_WAIT_ACK:
      if (ack && !syn) {
        printk(KERN_INFO "Received ack.");
        connection->tcp_state = ESTABLISHED;
        *reason = VALID_TCP_CONNECTION;
        return NF_ACCEPT;
      }
      break;
    case ESTABLISHED:
      if (!ack && !syn) {
        if (fin) {
          printk(KERN_INFO "Received fin removing connection.");
          // TODO: handle fin.
          remove_connection(connection);
          *reason = VALID_TCP_CONNECTION;
          return NF_ACCEPT;
        }
        printk(KERN_INFO "Received normal packet afther connection established.");
        // TODO: Handle protocol state.
        *reason = VALID_TCP_CONNECTION;
        return NF_ACCEPT;
      }
      break;
  }
  printk(KERN_INFO "Not a valid packet.");
  *reason = TCP_NON_COMPLIANT;
  return NF_DROP;
}


/***************************************************************************************************
 * Driver file operations.
 **************************************************************************************************/

/*
 * Our custom open function for file_operations. Each time we open the device we initializing the
 * changing variables (so we will be able to read it again and again).
 *
 * In this implementation we prepare the buffer that should be sent to the user.
 */
int open_connections_device(struct inode *_inode, struct file *_file) {

  remaining_num_of_bytes_to_read =
      (list_size + 1) * ROW_SIZE_AS_STRING + 1;

  // Prepare all the connections that should be written.
  connections_read_buffer = kcalloc(remaining_num_of_bytes_to_read, 1, GFP_KERNEL);
  if (connections_read_buffer == NULL) {
    return -1;
  }
  pointer_to_current_location_in_connections_read_buffer = connections_read_buffer;

  // Fill the buffer with the connections.
  get_connections_as_string(connections_read_buffer, remaining_num_of_bytes_to_read);

  return 0;
}

/*
 * Implementation for the read method of file_operations.
 */
ssize_t read_connections(struct file *filp, char *buff, size_t length, loff_t *offp) {
  ssize_t bytes_to_write_in_the_current_iteration =
      (remaining_num_of_bytes_to_read < length) ? remaining_num_of_bytes_to_read : length;

  // If nothing left to write return.
  if (bytes_to_write_in_the_current_iteration == 0) {
    return 0;
  }

  // Send the data to the user through 'copy_to_user'
  if (copy_to_user(buff, pointer_to_current_location_in_connections_read_buffer,
      bytes_to_write_in_the_current_iteration)) {
    kfree(connections_read_buffer);
    return -EFAULT;
  } else {
    // function succeeded, we just sent the user 'num_of_bytes' bytes, so we updating the counter
    // and the string pointer index.
    remaining_num_of_bytes_to_read -= bytes_to_write_in_the_current_iteration;
    pointer_to_current_location_in_connections_read_buffer +=
        bytes_to_write_in_the_current_iteration;
    return bytes_to_write_in_the_current_iteration;
  }
}

int release_connections_device(struct inode *inode, struct file *file) {
  kfree(connections_read_buffer);
  return 0;
}

/*
 * File operations for the connections device.
 */
static struct file_operations connections_device_fops = {
  .owner = THIS_MODULE,
  .open = open_connections_device,
  .read = read_connections,
  .release = release_connections_device
};


/***************************************************************************************************
 * Functions for sysfs attributes
 **************************************************************************************************/


ssize_t get_hosts(struct device *dev, struct device_attribute *attr, char *buf) {
  buf[0] = 0;
  strcat(buf, hosts_string);
  return strlen(buf);
}

ssize_t set_hosts(
    struct device *dev, struct device_attribute *attr, const char *buf, size_t count) {
  hosts_string[0] = 0;
  strcat(hosts_string, buf);
  return strnlen(buf, count);
}

static DEVICE_ATTR(hosts_load_store, S_IRWXO , get_hosts, set_hosts);


/***************************************************************************************************
 * Registration methods.
 **************************************************************************************************/


int register_connections_driver(struct class* fw_sysfs_class) {
  connections_device_major_number =
      register_chrdev(0, DEVICE_NAME_CONNECTIONS, &connections_device_fops);
  if(connections_device_major_number < 0) {
    return -1;
  }

  // Create sysfs device.
  host_sysfs_device = device_create(fw_sysfs_class, NULL,
      MKDEV(connections_device_major_number, 0), NULL, DEVICE_NAME_CONNECTIONS);
  if(IS_ERR(host_sysfs_device)) {
    unregister_chrdev(connections_device_major_number, DEVICE_NAME_CONNECTIONS);
    return -1;
  }

  // Create sysfs show size attribute.
  if(device_create_file(host_sysfs_device,
      (const struct device_attribute*) &dev_attr_hosts_load_store.attr)) {
    device_destroy(fw_sysfs_class, MKDEV(connections_device_major_number, 0));
    unregister_chrdev(connections_device_major_number, DEVICE_NAME_CONNECTIONS);
    return -1;
  }

  init_connections_list();
  return 0;
}

int remove_connections_device(struct class* fw_sysfs_class) {
  clear_connections_list();
  device_remove_file(host_sysfs_device,
      (const struct device_attribute *)&dev_attr_hosts_load_store.attr);
  device_destroy(fw_sysfs_class, MKDEV(connections_device_major_number, 0));
  unregister_chrdev(connections_device_major_number, DEVICE_NAME_CONNECTIONS);
  return 0;
}

