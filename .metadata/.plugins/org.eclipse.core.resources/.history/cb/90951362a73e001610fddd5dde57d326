#include "stateful.h"

connections_list_entry connections_list;
int list_size = 0;


/***************************************************************************************************
 * List handling methods.
 **************************************************************************************************/

/**
 * Adding a new connection with the given arguments. It is assumed that the caller already checked
 * that this is a valid connection.
 */
void add_connection(
    __be32 src_ip, __be16 src_port, __be32 dst_ip, __be16 dst_port, __u16 fragment) {
  connections_list_entry *new;
  struct timeval time;
  do_gettimeofday(&time);

  // Note that it is important to use GFP_ATOMIC due to concurrency considerations.
  new = kmalloc(sizeof(connections_list_entry), GFP_ATOMIC);
  if (new == NULL) {
    printk(KERN_INFO "ERROR: Failed to allocate space for new log. Not adding the current log.\n");
    return;
  }

  INIT_LIST_HEAD(&(new->list));
  new->timestamp = time.tv_sec;
  new->src_ip = src_ip;
  new->dst_ip = dst_ip;
  new->src_port = src_port;
  new->dst_port = dst_port;
  new->fragment = fragment;
  new->tcp_state = SENT_SYN_WAIT_SYNACK;

  // TODO: Specify protocol.
  list_add_tail(&(new->list), &connections_list.list);
  list_size++;
}

void remove_connection(connections_list_entry *entry) {
  if (list_empty(&(connections_list.list))) { // List is empty nothing to do.
    return;
  }
  list_del(&(entry->list));
  kfree(entry);
  list_size--;
}
connections_list_entry *find_connection(
    __be32 src_ip, __be32 dst_ip, __be16 src_port, __be16 dst_port) {
  connections_list_entry *cur_entry;
  list_for_each_entry(cur_entry, &(connections_list.list), list) {
    if ((cur_entry->src_ip == src_ip && cur_entry->src_port == src_port
        && cur_entry->dst_ip == dst_ip && cur_entry->dst_port == dst_port) ||
        (cur_entry->src_ip == dst_ip && cur_entry->src_port == dst_port
        && cur_entry->dst_ip == src_ip && cur_entry->dst_port == src_port)) {
      return cur_entry;
    }
  }
  return NULL;
}

void clear_connections_list(void) {
  connections_list_entry *cur_entry, *temp;
  if (list_empty(&(connections_list.list))) { // List is empty nothing to do.
    return;
  }
  list_for_each_entry_safe(cur_entry, temp, &(connections_list.list), list) {
    list_del(&(cur_entry->list));
    kfree(cur_entry);
  }
  list_size = 0;
}

int get_list_size(void) {
  return list_size;
}

void init_connections_list(void) {
  INIT_LIST_HEAD(&connections_list.list);
  list_size = 0;
}

int validate_and_update_connection(__be32 src_ip, __be32 dst_ip, __be16 src_port, __be16 dst_port,
    __u16 fragment, int syn, int ack, int fin, reason_t *reason) {
  connections_list_entry *connection = find_connection(src_ip, dst_ip, src_port, dst_port);
  // Convert syn and ack to a more comfortable form.
  syn = syn == ACK_YES ? 1 : 0;
  ack = ack == ACK_YES ? 1 : 0;
  fin = fin == ACK_YES ? 1 : 0;
  if (connection == NULL) {
    if (syn && !ack) {
      printk(KERN_INFO "Creating connection.");
      add_connection(src_ip, dst_ip, src_port, dst_port, fragment);
      *reason = VALID_TCP_CONNECTION;
      return NF_ACCEPT;
    } else {
      printk(KERN_INFO "Connection not exists.");
      *reason = CONN_NOT_EXIST;
      return NF_DROP;
    }
  }
  switch (connection->tcp_state) {
    case SENT_SYN_WAIT_SYNACK:
      if (ack && syn) {
        printk(KERN_INFO "Received syn ack.");
        connection->tcp_state = SENT_SYNACK_WAIT_ACK;
        *reason = VALID_TCP_CONNECTION;
        return NF_ACCEPT;
      }
      break;
    case SENT_SYNACK_WAIT_ACK:
      if (ack && !syn) {
        printk(KERN_INFO "Received ack.");
        connection->tcp_state = ESTABLISHED;
        *reason = VALID_TCP_CONNECTION;
        return NF_ACCEPT;
      }
      break;
    case ESTABLISHED:
      if (!ack && !syn) {
        if (fin) {
          printk(KERN_INFO "Received fin removing connection.");
          // TODO: handle fin.
          remove_connection(connection);
          *reason = VALID_TCP_CONNECTION;
          return NF_ACCEPT;
        }
        printk(KERN_INFO "Received normal packet afther connection established.");
        // TODO: Handle protocol state.
        *reason = VALID_TCP_CONNECTION;
        return NF_ACCEPT;
      }
      break;
  }
  printk(KERN_INFO "Not a valid packet.");
  *reason = TCP_NON_COMPLIANT;
  return NF_DROP;
}
