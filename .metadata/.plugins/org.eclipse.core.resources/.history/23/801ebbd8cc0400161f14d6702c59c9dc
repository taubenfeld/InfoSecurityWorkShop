#include "fw.h"
#include "chardev_rules.c"
#include "chardev_info.c"

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Amir Taubenfeld");

// Netfilter stuff.
static struct nf_hook_ops pre_hook_struct;
static struct nf_hook_ops post_routing_hook_struct;

static struct class* sysfs_class = NULL;



int get_packet(struct sk_buff *skb, const struct net_device *in, int hooknum) {

  rule_t rule;

  struct iphdr *iph;
  struct udphdr *udph;
  struct tcphdr *tcph;
  iph = ip_hdr(skb);
  rule.src_ip = iph->saddr;
  rule.dst_ip = iph->daddr;
  rule.protocol = iph->protocol;
  rule.ack = ACK_NO; // This is overridden in case it is a TCP protocol.

  switch (rule.protocol){
  case PROT_TCP:
    tcph = tcp_hdr(skb);
    rule.src_port = tcph->source;
    rule.dst_port = tcph->dest;
    rule.ack = tcph->ack ? ACK_YES : ACK_NO;

    // Check X_MAS_PACKET
    if (tcph->fin && tcph->urg && tcph->psh) {
      //log_entry(&input, NULL, REASON_XMAS_PACKET, hooknum, 0);
      return -1;
    }
    break;
  case PROT_UDP:
    udph = udp_hdr(skb);
    rule.src_port = udph->source;
    rule.dst_port = udph->dest;
    break;
  case PROT_ICMP: // ICMP doesn't uses port. TODO(amirt): validate that this is what expected.
  case PROT_OTHER:
  case PROT_ANY:
    rule.src_port = PORT_ANY;
    rule.dst_port = PORT_ANY;
  }



  return 0;
}












/***************************************************************************************************
 * Netfilter hooks.
 **************************************************************************************************/

/**
 * Function that will be hooked.
 * This function will be called by netfilter for forwarded packets.
 */
unsigned int  pre_routing_hook(unsigned int hooknum, struct sk_buff *skb,
    const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *)) {
  printk(KERN_INFO "*** packet blocked ***\n");
  number_of_blocked_packets++;
  return NF_DROP;
}

/**
 * Function that will be hooked.
 * This function will be called by netfilter for packets that passed.
 */
unsigned int  post_routing_hook(unsigned int hooknum, struct sk_buff *skb,
    const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *)) {
  printk(KERN_INFO "*** packet passed ***\n");
  number_of_passed_packets++;
  return NF_ACCEPT;
}


/***************************************************************************************************
 * Module's registeration and unregisteration methods.
 **************************************************************************************************/


int register_drivers(void) {
  sysfs_class = class_create(THIS_MODULE, "fw_class");
  if(IS_ERR(sysfs_class)) {
    return -1;
  }
  if (register_info_driver(sysfs_class) == -1) {
    class_destroy(sysfs_class);
    return -1;
  }
  if (register_rules_driver(sysfs_class) == -1) {
    remove_info_device(sysfs_class);
    class_destroy(sysfs_class);
    return -1;
  }
  return 1;
}

int register_hooks(void) {
  // Register hook that disables packet forwarding.
  pre_hook_struct.hook = pre_routing_hook;  // Hook our function.
  pre_hook_struct.hooknum = NF_INET_PRE_ROUTING;
  pre_hook_struct.priority = NF_IP_PRI_FIRST;
  pre_hook_struct.pf = PF_INET;
  if (nf_register_hook(&pre_hook_struct) < 0) {
    return -1;
  }

  // Register print packed passed on all packed that have reached post rounting.
  post_routing_hook_struct.hook = post_routing_hook;  // Hook our function.
  post_routing_hook_struct.hooknum = NF_INET_POST_ROUTING;  // Hook to on post routing.
  post_routing_hook_struct.priority = NF_IP_PRI_LAST;
  post_routing_hook_struct.pf = PF_INET;
  if (nf_register_hook(&post_routing_hook_struct) < 0) {
    nf_unregister_hook(&pre_hook_struct);
    return -1;
  }
  return 1;
}


static void dismiss_hooks(void) {
  nf_unregister_hook(&pre_hook_struct);
  nf_unregister_hook(&post_routing_hook_struct);
}

/**
 * The function that initialize the module.
 */
static int __init start_module(void) {
  printk(KERN_INFO "Amir's firewall is being loaded!\n");
  if (register_hooks() < 0) {
    printk(KERN_INFO "ERROR: Failed to register hooks\n");
    return -1;
  }
  if (register_drivers() < 0) {
    dismiss_hooks();
    printk(KERN_INFO "ERROR: Failed to register drivers\n");
    return -1;
  }
  return 0;  // if non-0 return, then init_module have failed.
}

/**
 * The function that dismiss the module.
 */
static void __exit dismiss_module(void) {
  printk(KERN_INFO "Amir's firewall is been dismissed!\n");
  dismiss_hooks();
  remove_info_device(sysfs_class);
  remove_rules_device(sysfs_class);
  class_destroy(sysfs_class);
}

module_init(start_module);
module_exit(dismiss_module);
